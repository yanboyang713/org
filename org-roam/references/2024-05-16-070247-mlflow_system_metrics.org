:PROPERTIES:
:ID:       9e0dbde4-42a1-4d4d-9a81-89a0390a5f00
:END:
#+title: MLflow System Metrics

[[id:64aa42dc-14c2-48c4-8360-45a31aa73f7f][MLFlow]] allows users to log system metrics including CPU stats, [[id:f67a83ed-53e2-4e33-bbd4-9bf528bf9e42][GPU]] stats, memory usage, [[id:56aa2a9a-1b75-4b3b-abe2-238454ab3c3d][networking measurement metrics]], and disk usage during the execution of an MLflow run.

* Extra Dependencies
To log system metrics in MLflow, please install psutil. To install psutil, run the following command:
#+begin_src bash
pip install psutil
#+end_src

If you want to catch GPU metrics, you also need to install pynvml:
#+begin_src bash
pip install pynvml
#+end_src
* Turn on/off System Metrics Logging
There are three ways to enable or disable system metrics logging:
** Using the Environment Variable to Control System Metrics Logging
You can set the environment variable *MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING* to true to turn on system metrics logging globally, as shown below:
#+begin_src bash
export MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING=true
#+end_src
However, if you are executing the command above from within Ipython notebook (Jupyter, Databricks notebook, Google Colab), the export command will not work due to the segregated state of the ephemeral shell. Instead you can use the following code:
#+begin_src bash
import os

os.environ["MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING"] = "true"
#+end_src

After setting the environment variable, you will see that starting an MLflow run will automatically collect and log the default system metrics. Try running the following code in your favorite environment and you should see system metrics existing in the logged run data. Please note that you donâ€™t necessarilty need to start an MLflow server, as the metrics are logged locally.
#+begin_src python
import mlflow
import time

with mlflow.start_run() as run:
    time.sleep(15)

print(mlflow.MlflowClient().get_run(run.info.run_id).data)
#+end_src

Your output should look like this:
#+begin_src file
<RunData: metrics={'system/cpu_utilization_percentage': 12.4,
'system/disk_available_megabytes': 213744.0,
'system/disk_usage_megabytes': 28725.3,
'system/disk_usage_percentage': 11.8,
'system/network_receive_megabytes': 0.0,
'system/network_transmit_megabytes': 0.0,
'system/system_memory_usage_megabytes': 771.1,
'system/system_memory_usage_percentage': 5.7}, params={}, tags={'mlflow.runName': 'nimble-auk-61',
'mlflow.source.name': '/usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py',
'mlflow.source.type': 'LOCAL',
'mlflow.user': 'root'}>
#+end_src

To disable system metrics logging, you can use either of the following commands:
#+begin_src bash
export MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING="false"
#+end_src
#+begin_src python
import os

del os.environ["MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING"]
#+end_src

Rerunning the MLflow code above will not log system metrics.
** Using *mlflow.enable_system_metrics_logging()*
We also provide a pair of APIs *mlflow.enable_system_metrics_logging()* and *mlflow.disable_system_metrics_logging()* to turn on/off system metrics logging globally for environments in which you do not have the appropriate access to set an environment variable. Running the following code will have the same effect as setting *MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING* environment variable to true:
#+begin_src bash
import mlflow

mlflow.enable_system_metrics_logging()

with mlflow.start_run() as run:
    time.sleep(15)

print(mlflow.MlflowClient().get_run(run.info.run_id).data)
#+end_src
** Enabling System Metrics Logging for a Single Run
In addition to controlling system metrics logging globally, you can also control it for a single run. To do so, set *log_system_metrics* as True or False accordingly in *mlflow.start_run()*:
#+begin_src python
with mlflow.start_run(log_system_metrics=True) as run:
    time.sleep(15)

print(mlflow.MlflowClient().get_run(run.info.run_id).data)
#+end_src

Please also note that using *log_system_metrics* will ignore the global status of system metrics logging. In other words, the above code will log system metrics for the specific run even if you have disabled system metrics logging by setting *MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING* to false or calling *mlflow.disable_system_metrics_logging()*.

* Reference List
1. https://mlflow.org/docs/latest/system-metrics/index.html#system-metrics
