:PROPERTIES:
:ID:       3d7c0a6e-df56-4379-a618-287bb14e19d6
:END:
#+title: rust HashMap
#+filetags: rust

* HashMap
Standard hash map with protection against HashDoS attacks:
#+begin_src rust
use std::collections::HashMap;

fn main() {
    let mut page_counts = HashMap::new();
    page_counts.insert("Adventures of Huckleberry Finn".to_string(), 207);
    page_counts.insert("Grimms' Fairy Tales".to_string(), 751);
    page_counts.insert("Pride and Prejudice".to_string(), 303);

    if !page_counts.contains_key("Les Misérables") {
        println!("We know about {} books, but not Les Misérables.",
                 page_counts.len());
    }

    for book in ["Pride and Prejudice", "Alice's Adventure in Wonderland"] {
        match page_counts.get(book) {
            Some(count) => println!("{book}: {count} pages"),
            None => println!("{book} is unknown.")
        }
    }

    // Use the .entry() method to insert a value if nothing is found.
    for book in ["Pride and Prejudice", "Alice's Adventure in Wonderland"] {
        let page_count: &mut i32 = page_counts.entry(book.to_string()).or_insert(0);
        *page_count += 1;
    }

    println!("{page_counts:#?}");
}
#+end_src
#+begin_src output
We know about 3 books, but not Les Misérables.
Pride and Prejudice: 303 pages
Alice's Adventure in Wonderland is unknown.
{
    "Alice's Adventure in Wonderland": 1,
    "Adventures of Huckleberry Finn": 207,
    "Pride and Prejudice": 304,
    "Grimms' Fairy Tales": 751,
}
#+end_src
*Notes*
+ HashMap is not defined in the prelude and needs to be brought into scope.
+ Try the following lines of code. The first line will see if a book is in the hashmap and if not return an alternative value. The second line will insert the alternative value in the hashmap if the book is not found.
  #+begin_src rust
  let pc1 = page_counts
      .get("Harry Potter and the Sorcerer's Stone ")
      .unwrap_or(&336);
  let pc2 = page_counts
      .entry("The Hunger Games".to_string())
      .or_insert(374);
  #+end_src
+ Unlike vec!, there is unfortunately no standard hashmap! macro.
  + Although, since Rust 1.56, HashMap implements From<[(K, V); N]>, which allows us to easily initialize a hash map from a literal array:
    #+begin_src rust
  let page_counts = HashMap::from([
    ("Harry Potter and the Sorcerer's Stone".to_string(), 336),
    ("The Hunger Games".to_string(), 374),
  ]);
    #+end_src
+ Alternatively HashMap can be built from any Iterator which yields key-value tuples.
+ We are showing HashMap<String, i32>, and avoid using &str as key to make examples easier. Using references in collections can, of course, be done, but it can lead into complications with the borrow checker.
  + Try removing to_string() from the example above and see if it still compiles. Where do you think we might run into issues?

* Reference List
1. https://google.github.io/comprehensive-rust/std/hashmap.html
