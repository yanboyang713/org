:PROPERTIES:
:ID:       388e0682-0ca4-4977-8dd5-7214a46436f2
:END:
#+title: rust Box
#+filetags: rust
* Box
[[https://doc.rust-lang.org/std/boxed/struct.Box.html][Box]] is an owned pointer to data on the heap:
#+begin_src rust
fn main() {
    let five = Box::new(5);
    println!("five: {}", *five);
}
#+end_src
#+begin_src output
five: 5
#+end_src
[[https://res.cloudinary.com/dkvj6mo4c/image/upload/v1691058396/rust/rust_box_unoprl.png]]

Box<T> implements Deref<Target = T>, which means that you can [[https://doc.rust-lang.org/std/ops/trait.Deref.html#more-on-deref-coercion][call methods from T directly on a Box<T>]].

*Notes*
+ Box is like std::unique_ptr in C++, except that it’s guaranteed to be not null.
+ In the above example, you can even leave out the * in the println! statement thanks to Deref.
+ A Box can be useful when you:
    + have a type whose size that can’t be known at compile time, but the Rust compiler wants to know an exact size.
    + want to transfer ownership of a large amount of data. To avoid copying large amounts of data on the stack, instead store the data on the heap in a Box so only the pointer is moved.
* Box with Recursive Data Structures
Recursive data types or data types with dynamic sizes need to use a Box:
#+begin_src rust
#[derive(Debug)]
enum List<T> {
    Cons(T, Box<List<T>>),
    Nil,
}

fn main() {
    let list: List<i32> = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Nil))));
    println!("{list:?}");
}
#+end_src
#+begin_src output
Cons(1, Cons(2, Nil))
#+end_src
[[https://res.cloudinary.com/dkvj6mo4c/image/upload/v1691059478/rust/rust_box_list_exnxn0.png]]
*Notes*
+ If Box was not used and we attempted to embed a List directly into the List, the compiler would not compute a fixed size of the struct in memory (List would be of infinite size).
+ Box solves this problem as it has the same size as a regular pointer and just points at the next element of the List in the heap.
+ Remove the Box in the List definition and show the compiler error. “Recursive with indirection” is a hint you might want to use a Box or reference of some kind, instead of storing a value directly.

* Niche Optimization
#+begin_src rust
#[derive(Debug)]
enum List<T> {
    Cons(T, Box<List<T>>),
    Nil,
}

fn main() {
    let list: List<i32> = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Nil))));
    println!("{list:?}");
}
#+end_src
#+begin_src output
Cons(1, Cons(2, Nil))
#+end_src
A Box cannot be empty, so the pointer is always valid and non-null. This allows the compiler to optimize the memory layout:
[[https://res.cloudinary.com/dkvj6mo4c/image/upload/v1691059847/rust/rust_box_list_Optimization_lxzm6t.png]]

* Reference List
1. https://doc.rust-lang.org/std/boxed/struct.Box.html
