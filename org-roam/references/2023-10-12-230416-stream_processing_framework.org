:PROPERTIES:
:ID:       b88a5a9d-6129-412f-bfa3-e6576e635943
:END:
#+title: stream processing framework

Data Stream Processing Engines (DSPEs) lie at the core of DSPSs and enable the definition and execution of stream processing pipelines.

* Use case
Under several application scenarios such as
+ fraud detection in financial transactions
+ healthcare analytics involving digital sensors
+ [[id:9a80f403-b018-4fd3-8b0b-0114ed3495e8][Internet of Things (IoT)]]

* MOTIVATION
Modern Data Stream Processing Systems (DSPS) try to combine batch and stream processing capabilities into a single or multiple parallel data processing pipelines.

* ARCHITECTURE OF A DSPS
the architecture of a DSPS is generally multi-tiered and is composed of many loosely coupled components that include data sources, data collection systems, data storage systems, messaging systems, and stream processing and delivery systems.
[[https://res.cloudinary.com/dkvj6mo4c/image/upload/v1697167946/big%20data/r3gnrdxyifqvd2aci0dc.png]]

** DATA STREAM INGESTION LAYER
:PROPERTIES:
:ID:       5bbb57a3-9c5d-4a19-adbe-fa8404792f25
:END:
Data ingestion is the process of getting data streams from its source to its processing or [[id:c53db320-87f0-4eb2-bca3-cfb726b325f9][storage]] system.

There are many sources of input data streams [28]. These include data streams from various IoT devices such as sensors, video and other electronic monitors, social network Application Programming Interfaces (APIs), [[id:05606c57-c902-4b2d-a514-d375ff30ce31][WebSockets]], Representational State Transfer ([[id:8aeb67cf-d0e4-44d2-a3d4-8e4d9f71748b][RESTful]]) Web services, service usage logs, other stream processing systems, or any object which can collect and transmit time-sensitive data.

Queueing systems encompass the spectrum of messaging services, from the traditional message queuing products such as MQTT, RabbitMQ, and ActiveMQ to the newer products such as NSQ and ZeroMQ [9], [29]. Apache Kafka and DistributedLog have grown to embody more than a message system, and both currently support publishing and subscribing to streams of records [8]. There are also many commercial stream ingestion systems including Scribe [26] developed at Facebook, Kinesis Data Firehose managed by Amazon Web Services (AWS), IBM WebSphere MQ and [[id:caf9392e-912f-400a-ba57-f6ffd23bd983][Messaging services on Azure]] [29].

**  DATA STREAM PROCESSING LAYER
The data stream processing layer is where the streaming data processing applications or jobs are executed. It can host loosely coupled disjoint applications or a DSPE or both. DSPEs generally offer a set of streaming data processing operators which can be configured and threaded together to build a stream data processing pipeline to analyze incoming data streams [30].

[[id:df8d19c2-9a42-4139-adb7-c74117e13a8d][data stream processing engines (DSPEs)]]

** STORAGE LAYER
DSPSs often store analyzed data, discovered patterns and extracted knowledge from different data processing stages for further processing.

DSPS architecture ranges from traditional file systems such as HDFS and Baidu File System (BFS) to distributed file relational databases such as [[id:97a5c070-1745-4002-b5fe-0d170877ba3f][PostgreSQL]], key-value stores such as [[id:c7733834-76c6-4b87-b531-d0259b627f3c][Redis]], in-memory databases such as VoltDB, document storage such as MongoDB, graph storage systems such as Neo4j, NoSQL databases such as Cassandra, and NewSQL such as CockroachDB [38].

[[id:be42aaf3-a82d-4dfc-b885-fba7c9676dff][Azure Data Lake]]

** RESOURCE MANAGEMENT LAYER
The resource management layer coordinates actions among compute and storage nodes and manages resource allocation and scheduling in distributed systems to enable parallel processing of high volume and velocity of data streams [39].

[[id:b60301a4-574f-43ee-a864-15f5793ea990][Kubernetes]]

** OUTPUT LAYER
The results from data stream processing pipelines can be directed to an application, another workflow, a visualization tool, or an alert or monitoring dashboard [8].


* Reference List
1. Isah, H., Abughofa, T., Mahfuz, S., Ajerla, D., Zulkernine, F., & Khan, S. (2019). A survey of distributed data stream processing frameworks. IEEE Access, 7, 154300-154316.
