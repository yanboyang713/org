:PROPERTIES:
:ID:       632fad71-60e0-4c5f-b34d-bf2d9dae3b7a
:END:
#+title: key differences between monolithic and microkernel
#+filetags:  

* Here are some key differences between [[id:f67fabdd-5544-4375-b131-06ff31cf19b8][monolithic kernel]] and [[id:0a48adc4-8a91-48b7-bb10-8c4b9d0cef6f][microkernel]] architectures
+ System services: In a monolithic kernel, all system services run in kernel space, whereas in a microkernel, only the most basic services (such as memory management and process scheduling) run in kernel space, with other services running in user space.
+ Performance: Monolithic kernels are generally faster and more efficient than microkernels, because there is no overhead associated with moving data between kernel space and user space.
+ Modularity: Microkernels are more modular than monolithic kernels, because services are separated into different processes running in user space. This makes it easier to add or remove services without affecting other parts of the system.
+ Security: Microkernels are generally considered more secure than monolithic kernels, because a bug or vulnerability in a service running in user space is less likely to affect the entire system.
+ Development: Developing a monolithic kernel is generally simpler and faster than developing a microkernel, because all system services are integrated and share the same memory space.

In summary, monolithic kernels are characterized by their tight integration of system services and high performance, while microkernels are characterized by their modularity, simplicity, and security. The choice between a monolithic and microkernel architecture depends on the specific needs and requirements of the operating system being developed.

* Key differences between Monolithic Kernel and Microkernel are as follows
| Basics        | Micro Kernel                                                                       | Monolithic Kernel                                                                                            |
|---------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------|
| Size          | Smaller in                                                                         | Larger as OS and user both lie in the same address space                                                     |
| Execution     | Slower                                                                             | Faster                                                                                                       |
| Extendible    | Easily extendible                                                                  | Complex to extend                                                                                            |
| Security      | If the service crashes then there is no effect on working on the microkernel.      | If the process/service crashes, the whole system crashes as both user and OS were in the same address space. |
| Code          | More code is required to write a microkernel.                                      | Less code is required to write a monolithic kernel.                                                          |
| Examples      | [[id:7d56f000-e6ad-429e-a9e9-b30dbf317a5a][L4Linux]], macOS                                                                     | Windows, Linux BSD                                                                                           |
| Security      | More secure because only essential services run in kernel mode                     | Susceptible to security vulnerabilities due to the amount of code running in kernel mode                     |
| Platform      | independence and More portable because most drivers and services run in user space | Less portable due to direct hardware access                                                                  |
| Communication | Message passing between user-space servers                                         | Direct function calls within kernel                                                                          |
| Performance   | Lower due to message passing and more overhead                                     | High due to direct function calls and less overhead                                                          |

* Reference List
1. https://www.geeksforgeeks.org/monolithic-kernel-and-key-differences-from-microkernel/
