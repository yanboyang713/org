:PROPERTIES:
:ID:       8e6e76d5-c2b0-43ba-b837-1a0a68933c23
:END:
#+title: CI/CD
#+filetags:  
* Introduction
Continuous integration (CI) and continuous delivery (CD), also known as CI/CD, embodies a culture, operating principles, and a set of practices that application development teams use to deliver code changes more frequently and reliably.

CI/CD is a best practice for [[id:df1d63a9-ab91-406c-bd99-e37b9db2a645][DevOps]] teams. It is also a best practice in agile methodology. By automating integration and delivery, CI/CD lets software development teams focus on meeting business requirements while ensuring code quality and software security.

* What is Continuous Delivery?
:PROPERTIES:
:ID:       28e0ef10-92a9-4b77-b618-3cd171236a44
:END:
Continuous delivery is a software engineering practice in which code changes are prepared to be released to production. However, keep in mind that the codes must pass the automated unit testing, integration testing, system testing before being pushed to production.

The transition between continuous integration and continuous delivery is usually completed automatically, including automated testing at the unit, integration, and system levels.

Automated tests provide more thorough validation. Developers can update and locate issues before the release is publicly available. Additionally, when incorporated with an automated release process, it is a perfect combination to establish a seamless and mechanized pipeline.

With the releases available in the staging environment, continuous delivery allows developers to release at any rate of their choice, within a single push of a button. That means the decision to initiate a release must be made by a human, and only after that does continuous delivery takes place.

* What is Continuous Deployment?
:PROPERTIES:
:ID:       addfac26-87d4-4676-9d39-a89fe51cc217
:END:
Continuous deployment takes a further step from continuous delivery. It is a software engineering practice that ensures code changes are continuously released into the production environment. The goal is to release a new version whenever developers make changes and automatically get those changes to the end-users.

This is the ultimate goal of software development companies. Your companyâ€™s development and IT teams must properly prepare to tackle implementing continuous deployment as well as preparing production-ready environments and appropriate practices to make sure the live environment is up to par.

In continuous deployment, codes are run and maintained in a simulated environment, ensuring that the ultimate quality is taken into consideration. Real-time monitoring of the live environment is also a requirement to keep track of any arising issues and resolve them quickly.

* Next generation CI/CD applications
You may be wondering about some of the more advanced areas for CI/CD pipeline development and management. Here are a few notable ones:
+ [[id:02058a71-7a44-48e7-aacf-bcf0be310fb6][MLOps]] is the IaC and CI/CD of machine learning models and supports infrastructure, integration, and deployment to training and production environments.

* Reference List
1. https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html
2. https://katalon.com/resources-center/blog/continuous-delivery-vs-continuous-deployment?utm_term=&utm_campaign=US_Pmax_SFDC&utm_source=adwords&utm_medium=ppc&hsa_acc=4835360476&hsa_cam=19968362393&hsa_grp=&hsa_ad=&hsa_src=x&hsa_tgt=&hsa_kw=&hsa_mt=&hsa_net=adwords&hsa_ver=3&gclid=CjwKCAjw29ymBhAKEiwAHJbJ8mjCnBbeDqMGJC_yJv57rDHdPq89lPofevb8W41QkX_Djc06Ek2PQBoCUbgQAvD_BwE
