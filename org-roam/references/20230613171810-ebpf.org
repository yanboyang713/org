:PROPERTIES:
:ID:       bf5b14f3-8e4c-4706-aea0-102268c418d3
:END:
#+title: eBPF
#+filetags: BPF eBPF

Berkeley Packet Filter (BPF) was initially developed in 1992 to filter packets before they were received by the kernel or even worse by the user space; the tool was re-written and included in Linux Kernel in 2014, now named the extended Berkeley Packet Filter (eBPF). eBPF can be conceived as a lightweight, sandboxed virtual machine (VM) within the Linux kernel - eBPF programs are invoked by the kernel when certain events, called hooks, occur. Examples of such hooks include system calls, network events. These processes enable deep analysis into events, and even enable security actions to be performed with low overhead.

In addition to several architectural improvements, eBPF introduces the capability of handling generic event processing in the [[id:fc1c07c3-0d30-4eeb-a145-c018ddf16463][kernel]], JIT compiling for increased performance, stateful processing using maps, and libraries (helpers) to handle more complex tasks, available within the kernel. When a certain event or hook happens, the eBPF application is invoked and run with an extremely low overhead, as there is JIT compiling. eBPF programs can be written in restricted C and compiled using the LLVM Clang compiler, or in eBPF assembly instructions and converted to bytecode using the bpf asm utility. The bytecode can then be loaded using the bpf() system call. A loaded eBPF program follows an event-driven architecture and it is therefore hooked to a particular type of event. Each occurrence of the event will trigger its execution, and, based on the type of event, the program might be able to alter the event context as shown in Fig. 2. In this case, we are able to perform an action if a specific condition is met; these actions are varied - for example, actions may cause events to be logged in a monitoring system, or perform security routines, etc.

[[https://res.cloudinary.com/dkvj6mo4c/image/upload/v1686704935/k8s/BPF_boz7gc.png]]

* Reference List
1. Sedghpour, M. R. S., & Townend, P. (2022, August). Service Mesh and eBPF-Powered Microservices: A Survey and Future Directions. In 2022 IEEE International Conference on Service-Oriented System Engineering (SOSE) (pp. 176-184). IEEE.
2. https://www.youtube.com/watch?v=ThtRT8dhu8c&ab_channel=CodingTech
3. https://www.tigera.io/learn/guides/ebpf/
4. https://www.oreilly.com/library/view/learning-ebpf/9781098135119/ch01.html
5. https://mp.weixin.qq.com/s?__biz=MzkyMjM4MTcwOQ==&mid=2247484503&idx=1&sn=017208e9f66a7fd32fea781983e7071b&chksm=c1f478b5f683f1a3e67cc1a18674b8e220e39014b214829a11a533b827160c7fa55a7b008879&mpshare=1&scene=1&srcid=1106ntuRC4alaxcfKeaHM9xE&sharer_shareinfo=5a5190f46ae859e89aa44a20f481dcee&sharer_shareinfo_first=5a5190f46ae859e89aa44a20f481dcee&exportkey=n_ChQIAhIQFaCC9WCNvkGEnvxqNpc0WBKWAgIE97dBBAEAAAAAAJ6yLRyWlqIAAAAOpnltbLcz9gKNyK89dVj0eyuX4vZNXOtab1psjJl8DZbtnzMFalMlMx053haZ%2FVeOsBXHPMyHrX%2BELzJms1NTtbEMcJWDB82RcYgzYfu7GS4QlViiibLhguNscxfk3k3JsbCAMxmGVIx4%2BntuqSBqCWbO6eaKjqxaFaPwtVObh6WBQbeQKkGMWsdKsYSvzk4JxMG6OYwQ7KZxOYZdT0dDk5UlvY2%2FFWWhDdapETg%2BncSSFAimQs8ohdp15sYnMH28%2FeiNTbOqJ2FDAfTd89rAPkp9GwuLThO7qt0fEilBhX%2FzAXcNhx8a5lYpAUCWxZ58k3fivNJPKerNoJ%2FsWsxB&acctmode=0&pass_ticket=E%2BmnNp%2Bw0XZsXNvf0lisNyjUvGGBaKp56bDCQei7wgiLvyHJdhYYv3BQKQ9PsNE3JY4N6SQdTajfHQuR3z66Pg%3D%3D&wx_header=0#rd
